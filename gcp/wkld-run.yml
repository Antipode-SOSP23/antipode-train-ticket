---
- hosts: clients, swarm_manager
  gather_facts: no
  become: no
  any_errors_fatal: true

  tasks:

    - name: Ensures wkld dir exists
      file:
        path: /code/wkld
        state: directory
        mode: u=rwx,g=rw,o=xrw

    - name: Copy locustfile.py file
      copy:
        src: "{{ deploy_path }}/locustfile.py"
        dest: /code/wkld/locustfile.py
        mode: u=rwx,g=r,o=xr

- hosts: clients
  gather_facts: no
  become: no
  any_errors_fatal: true

  tasks:

    - name: Upload seed files
      copy:
        src: "{{ deploy_path }}/{{ deploy_tag }}_seed_{{ hostvars[inventory_hostname]['gcp_name'] }}.yml"
        dest: "/code/wkld/{{ deploy_tag }}_seed_{{ hostvars[inventory_hostname]['gcp_name'] }}.yml"
        mode: u=rwx,g=r,o=xr

    - name: Register available seeds to complete
      shell: >
        cat /code/wkld/{{ deploy_tag }}_seed_{{ hostvars[inventory_hostname]['gcp_name'] }}.yml | wc -l
      register: available_seeds

    - name: Print available seeds per client
      debug:
        msg: "Seeds: {{ available_seeds.stdout }}"

- hosts: swarm_manager
  gather_facts: no
  become: no
  any_errors_fatal: true

  tasks:

    - name: Remove any pre-existing locust stack
      shell: >
        docker stack rm locust

    - name: Copy locust docker-compose file
      copy:
        src: "{{ deploy_path }}/docker-compose-locust.yml"
        dest: /code/wkld/docker-compose-locust.yml
        mode: u=rwx,g=r,o=xr

    - name: Run locust
      shell: >
        docker stack deploy --with-registry-auth --compose-file /code/wkld/docker-compose-locust.yml locust ;
      register: out
      failed_when: "not(out.rc == 0) or 'fail' in out.stderr"

    # - name: Wait for locust to complete
    #   shell: >
    #     docker stack ps --format {% raw %}"{{.ID}}|{{.CurrentState}}"{% endraw %} locust | grep "Complete" | wc -l
    #   register: completed_locust
    #   retries: 8
    #   # we do more retries but with a quarter of the duration delay in between
    #   delay: "{{ (duration | int) // 4 }}"
    #   # compare number of services spawned with number of services that are up (1/1 replica state)
    #   until: (completed_locust.stdout | int) == ((num_workers | int) + 1)

    - name: Wait for all locust evaluation files to be present
      wait_for:
        path: "/code/wkld/{{ item }}"
        timeout: 99999999999
      with_items:
        - "{{ deploy_tag }}.err"
        - "{{ deploy_tag }}.html"
        - "{{ deploy_tag }}_exceptions.csv"
        - "{{ deploy_tag }}_failures.csv"
        - "{{ deploy_tag }}_stats_history.csv"
        - "{{ deploy_tag }}_stats.csv"

    # WARN: Only remove the stack after gather